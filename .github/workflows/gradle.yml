# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

# main branch에 push & pull request 발생하면 동작
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 발생할 워크플로우
jobs:
  deploy: 
    runs-on: ubuntu-latest

    steps:

    # JDK 설정 - GitHub Actions에서 사용할 JDK 
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # application.yml 생성
    - name: Create application.yml
      run: |
        cd ./src/main
        mkdir -p resources
        cd ./resources

        # application.yml 생성 후 시크릿키에서 내용 가져와 덮어쓰기
        touch ./application.yml
        echo "${{ secrets.APPLICATION_YML }}" >> ./application.yml

      shell: bash
    
    # Spring Boot 어플리케이션 Build: .jar 생성
    - name: Build with Gradle
      run: ./gradlew clean build -x test
    
    # Docker Image Build
    - name: Build Docker Image
      run: docker build --platform linux/amd64 --no-cache -t dongur2/jeju-dorang .
    
    # DockerHub Login
    - name: Login DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Docker Image -> Docker Hub push
    - name: Push on Docker Hub
      run: docker push dongur2/jeju-dorang

    # Execute SSH & Deploy on EC2
    - name: Execute SSH and Deploy on EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }} # EC2 퍼블릭 IPv4 DNS
        username: ubuntu
        port: 22
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          docker stop jeju-dorang
          docker rm jeju-dorang
          docker rmi dongur2/jeju-dorang

          docker pull dongur2/jeju-dorang
          sudo docker run -d -p 8080:8080 --name jeju-dorang dongur2/jeju-dorang
          
